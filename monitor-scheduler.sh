#!/bin/bash
# Ïä§ÏºÄÏ§ÑÎü¨ Î∞è ÌÜ†ÌÅ∞ Í∞±Ïã† Î™®ÎãàÌÑ∞ÎßÅ Ïä§ÌÅ¨Î¶ΩÌä∏

echo "üîç Ïä§ÏºÄÏ§ÑÎü¨ Î∞è ÌÜ†ÌÅ∞ Í∞±Ïã† Î™®ÎãàÌÑ∞ÎßÅ"
echo "================================="
echo ""

# ÏÉâÏÉÅ ÏΩîÎìú
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# ÏÑ§Ï†ï
PROJECT_ID=$(gcloud config get-value project)
REGION="us-central1"
JOB_NAME="veo-token-refresh"
FUNCTION_NAME="veo-token-updater"

echo "ÌîÑÎ°úÏ†ùÌä∏: $PROJECT_ID"
echo ""

# 1. Ïä§ÏºÄÏ§ÑÎü¨ ÏÉÅÌÉú Î∞è Ïã§Ìñâ Í∏∞Î°ù ÌôïÏù∏
echo -e "${BLUE}1Ô∏è‚É£ Cloud Scheduler ÏÉÅÌÉú${NC}"
echo "------------------------"

# Ïä§ÏºÄÏ§ÑÎü¨ ÏÉÅÏÑ∏ Ï†ïÎ≥¥
JOB_INFO=$(gcloud scheduler jobs describe $JOB_NAME --location=$REGION --format=json 2>/dev/null)

if [ -n "$JOB_INFO" ]; then
    echo "$JOB_INFO" | jq -r '
        "Ïù¥Î¶Ñ: " + .name,
        "Ïä§ÏºÄÏ§Ñ: " + .schedule,
        "ÏãúÍ∞ÑÎåÄ: " + .timeZone,
        "ÏÉÅÌÉú: " + .state,
        "ÎßàÏßÄÎßâ Ïã§Ìñâ: " + (.lastAttemptTime // "ÏóÜÏùå"),
        "Îã§Ïùå Ïã§Ìñâ: " + (.nextRunTime // "ÏóÜÏùå")
    '
    
    # ÎßàÏßÄÎßâ Ïã§Ìñâ ÏãúÍ∞Ñ Í≥ÑÏÇ∞
    LAST_RUN=$(echo "$JOB_INFO" | jq -r '.lastAttemptTime // empty')
    if [ -n "$LAST_RUN" ]; then
        LAST_RUN_EPOCH=$(date -d "$LAST_RUN" +%s 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%S" "${LAST_RUN%%.*}" +%s 2>/dev/null)
        CURRENT_EPOCH=$(date +%s)
        DIFF_MINUTES=$(( ($CURRENT_EPOCH - $LAST_RUN_EPOCH) / 60 ))
        
        echo ""
        if [ $DIFF_MINUTES -gt 35 ]; then
            echo -e "${RED}‚ö†Ô∏è  Í≤ΩÍ≥†: ÎßàÏßÄÎßâ Ïã§ÌñâÏù¥ ${DIFF_MINUTES}Î∂Ñ Ï†ÑÏûÖÎãàÎã§!${NC}"
            echo "   30Î∂ÑÎßàÎã§ Ïã§ÌñâÎêòÏñ¥Ïïº ÌïòÎäîÎç∞ ÏßÄÏó∞ÎêòÍ≥† ÏûàÏäµÎãàÎã§."
        else
            echo -e "${GREEN}‚úÖ Ï†ïÏÉÅ: ÎßàÏßÄÎßâ Ïã§ÌñâÏù¥ ${DIFF_MINUTES}Î∂Ñ Ï†ÑÏûÖÎãàÎã§.${NC}"
        fi
    fi
else
    echo -e "${RED}‚ùå Ïä§ÏºÄÏ§ÑÎü¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§${NC}"
fi

# 2. Cloud Function Î°úÍ∑∏ ÌôïÏù∏
echo ""
echo -e "${BLUE}2Ô∏è‚É£ Cloud Function ÏµúÍ∑º Ïã§Ìñâ Î°úÍ∑∏${NC}"
echo "--------------------------------"

echo "ÏµúÍ∑º 5Í∞ú Ïã§Ìñâ Í∏∞Î°ù:"
gcloud functions logs read $FUNCTION_NAME \
    --region=$REGION \
    --limit=50 \
    --format="table(time,severity,text)" | grep -E "(Executing|success|error|Updated)" | head -20

# 3. Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ ID ÏûÖÎ†• Î∞è ÌòÑÏû¨ Í∞í ÌôïÏù∏
echo ""
echo -e "${BLUE}3Ô∏è‚É£ Google Sheets ÌòÑÏû¨ ÏÉÅÌÉú${NC}"
echo "-------------------------"
echo -n "Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ ID: "
read SPREADSHEET_ID

if [ -n "$SPREADSHEET_ID" ]; then
    # ÌòÑÏû¨ ÌÜ†ÌÅ∞ ÌôïÏù∏
    cat > /tmp/check-sheet.py << EOF
import sys
from google.oauth2 import service_account
from googleapiclient.discovery import build
from datetime import datetime, timezone, timedelta
import json

KEY_FILE = "$HOME/veo-key.json"
SPREADSHEET_ID = "$SPREADSHEET_ID"

try:
    # Sheets ÏùΩÍ∏∞
    sheets_creds = service_account.Credentials.from_service_account_file(
        KEY_FILE,
        scopes=['https://www.googleapis.com/auth/spreadsheets']
    )
    
    service = build('sheets', 'v4', credentials=sheets_creds)
    
    result = service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID,
        range='A1:C2'
    ).execute()
    
    values = result.get('values', [])
    if len(values) > 1 and len(values[1]) >= 3:
        last_updated = values[1][1]
        token = values[1][2]
        
        print(f"Project ID: {values[1][0]}")
        print(f"Last Updated: {last_updated}")
        print(f"Token: {token[:30]}...{token[-10:]}")
        print(f"Token Length: {len(token)}")
        
        # ÏãúÍ∞Ñ Ï∞®Ïù¥ Í≥ÑÏÇ∞
        try:
            # KST ÏãúÍ∞Ñ ÌååÏã± ÏãúÎèÑ
            update_time = datetime.strptime(last_updated, '%Y-%m-%d %H:%M:%S')
            update_time = update_time.replace(tzinfo=timezone(timedelta(hours=9)))  # KST
            now = datetime.now(timezone(timedelta(hours=9)))
            diff = now - update_time
            minutes_ago = int(diff.total_seconds() / 60)
            
            print(f"\\nÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: {minutes_ago}Î∂Ñ Ï†Ñ")
            
            if minutes_ago > 60:
                print("‚ùå Í≤ΩÍ≥†: 1ÏãúÍ∞Ñ Ïù¥ÏÉÅ ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!")
                print("   ÌÜ†ÌÅ∞Ïù¥ ÎßåÎ£åÎêòÏóàÏùÑ Í∞ÄÎä•ÏÑ±Ïù¥ ÎÜíÏäµÎãàÎã§.")
            elif minutes_ago > 35:
                print("‚ö†Ô∏è  Ï£ºÏùò: 30Î∂Ñ Ïù¥ÏÉÅ ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
            else:
                print("‚úÖ Ï†ïÏÉÅ: ÏµúÍ∑ºÏóê ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§.")
                
        except Exception as e:
            print(f"ÏãúÍ∞Ñ ÌååÏã± Ïò§Î•ò: {e}")
            
        # ÌÜ†ÌÅ∞ Ïú†Ìö®ÏÑ± ÌôïÏù∏
        print("\\nÌÜ†ÌÅ∞ ÌòïÏãù ÌôïÏù∏:")
        if token.startswith("ya29."):
            print("‚úÖ Ïò¨Î∞îÎ•∏ Google OAuth ÌÜ†ÌÅ∞ ÌòïÏãù")
        else:
            print("‚ùå ÏûòÎ™ªÎêú ÌÜ†ÌÅ∞ ÌòïÏãù")
            
    else:
        print("‚ùå ÏãúÌä∏Ïóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§")
        
except Exception as e:
    print(f"Ïò§Î•ò: {e}")
EOF

    if command -v python3 &> /dev/null; then
        PY_CMD="python3"
    else
        PY_CMD="python"
    fi
    
    $PY_CMD /tmp/check-sheet.py
fi

# 4. Cloud Function Ïã§Ìñâ ÌÖåÏä§Ìä∏
echo ""
echo -e "${BLUE}4Ô∏è‚É£ Cloud Function ÏßÅÏ†ë ÌÖåÏä§Ìä∏${NC}"
echo "-----------------------------"
FUNCTION_URL=$(gcloud functions describe $FUNCTION_NAME --region=$REGION --gen2 --format="value(serviceConfig.uri)" 2>/dev/null || \
               gcloud functions describe $FUNCTION_NAME --region=$REGION --format="value(httpsTrigger.url)")

if [ -n "$FUNCTION_URL" ]; then
    echo "Function URL: $FUNCTION_URL"
    echo "ÏßÅÏ†ë Ìò∏Ï∂ú Ï§ë..."
    
    RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" $FUNCTION_URL)
    HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
    BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
    
    echo "ÏùëÎãµ ÏΩîÎìú: $HTTP_CODE"
    echo "ÏùëÎãµ ÎÇ¥Ïö©: $BODY"
    
    if [ "$HTTP_CODE" = "200" ]; then
        echo -e "${GREEN}‚úÖ Function Ïã§Ìñâ ÏÑ±Í≥µ${NC}"
    else
        echo -e "${RED}‚ùå Function Ïã§Ìñâ Ïã§Ìå®${NC}"
    fi
fi

# 5. Î¨∏Ï†ú ÏßÑÎã® Î∞è Ìï¥Í≤∞Ï±Ö
echo ""
echo -e "${BLUE}5Ô∏è‚É£ ÏßÑÎã® Í≤∞Í≥º Î∞è Ìï¥Í≤∞Ï±Ö${NC}"
echo "---------------------"

cat << 'EOF'
Í∞ÄÎä•Ìïú Î¨∏Ï†úÎì§:

1. Cloud SchedulerÍ∞Ä Ïã§Ìå®ÌïòÎäî Í≤ΩÏö∞:
   - Cloud Function URLÏù¥ Î≥ÄÍ≤ΩÎêòÏóàÏùÑ Ïàò ÏûàÏùå
   - Í∂åÌïú Î¨∏Ï†úÏùº Ïàò ÏûàÏùå
   
   Ìï¥Í≤∞: ./update-scheduler.sh Ïã§Ìñâ

2. Cloud FunctionÏùÄ Ïã§ÌñâÎêòÏßÄÎßå SheetsÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏ Ïïà ÎêòÎäî Í≤ΩÏö∞:
   - ÌôòÍ≤Ω Î≥ÄÏàòÍ∞Ä ÏÜêÏã§ÎêòÏóàÏùÑ Ïàò ÏûàÏùå
   - ÏÑúÎπÑÏä§ Í≥ÑÏ†ï ÌÇ§Í∞Ä ÎßåÎ£åÎêòÏóàÏùÑ Ïàò ÏûàÏùå
   
   Ìï¥Í≤∞: Cloud Function Ïû¨Î∞∞Ìè¨
   
3. ÌäπÏ†ï ÏãúÍ∞ÑÎåÄÏóêÎßå Ïã§Ìå®ÌïòÎäî Í≤ΩÏö∞:
   - Google API Ìï†ÎãπÎüâ Ï¥àÍ≥º
   - ÎÑ§Ìä∏ÏõåÌÅ¨ ÏùºÏãúÏ†Å Ïò§Î•ò
   
   Ìï¥Í≤∞: Cloud FunctionÏóê Ïû¨ÏãúÎèÑ Î°úÏßÅ Ï∂îÍ∞Ä

4. ÌÜ†ÌÅ∞ÏùÄ ÏÉùÏÑ±ÎêòÏßÄÎßå n8nÏóêÏÑú Ïã§Ìå®ÌïòÎäî Í≤ΩÏö∞:
   - n8nÏù¥ Ï∫êÏãúÎêú Ïò§ÎûòÎêú ÌÜ†ÌÅ∞ ÏÇ¨Ïö©
   - ÌÜ†ÌÅ∞ ÌòïÏãùÏóê Î¨∏Ï†ú (Í≥µÎ∞±, Ï§ÑÎ∞îÍøà)
   
   Ìï¥Í≤∞: n8n ÏõåÌÅ¨ÌîåÎ°úÏö∞Ïóê .trim() Ï∂îÍ∞Ä
EOF

# 6. Ï¶âÏãú ÏàòÏ†ï Î™ÖÎ†πÏñ¥
echo ""
echo -e "${YELLOW}üîß Ï¶âÏãú ÏàòÏ†ï Î™ÖÎ†πÏñ¥:${NC}"
echo "# Ïä§ÏºÄÏ§ÑÎü¨ Í∞ïÏ†ú Ïã§Ìñâ"
echo "gcloud scheduler jobs run $JOB_NAME --location=$REGION"
echo ""
echo "# Cloud Function Î°úÍ∑∏ Ïã§ÏãúÍ∞Ñ ÌôïÏù∏"
echo "gcloud functions logs tail $FUNCTION_NAME --region=$REGION"
echo ""
echo "# Cloud Function Ïû¨Î∞∞Ìè¨ (ÌôòÍ≤ΩÎ≥ÄÏàò Ïû¨ÏÑ§Ï†ï)"
echo "cd /path/to/gcp-token-service && ./complete-setup.sh"

# Ï†ïÎ¶¨
rm -f /tmp/check-sheet.py